name: Lint and Test Charts

on:
 pull_request:
    paths:
      - 'charts/development/**'

permissions:
  contents: read

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0
        
      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config .github/chart-testing-config.yaml)
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --config .github/chart-testing-config.yaml

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.8.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --config .github/chart-testing-config.yaml

  security-test:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Security test
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: 'charts/development'
          scan-type: 'config'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

   test-helm-chart:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up KVM
      run: |
        sudo apt-get update
        sudo apt-get install -y libvirt-daemon-system libvirt-dev libvirt-clients qemu-kvm
        sudo systemctl enable libvirtd
        sudo systemctl start libvirtd
        sudo usermod -a -G libvirt $(whoami)
        sudo newgrp libvirt

    - name: Install Minishift
      run: |
        curl -Lo minishift.tgz https://github.com/minishift/minishift/releases/download/v1.34.3/minishift-1.34.3-linux-amd64.tgz
        tar -xvzf minishift.tgz
        sudo mv minishift-1.34.3-linux-amd64/minishift /usr/local/bin/

    - name: Start Minishift
      run: |
        minishift start --vm-driver kvm

    - name: Login to OpenShift
      run: |
        oc login -u developer -p developer

    - name: Create project
      run: |
        oc new-project my-helm-test

    - name: Grant permissions
      run: |
        oc adm policy add-scc-to-user anyuid -z default -n my-helm-test

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install Helm chart
      run: |
        cd /charts/development
        helm install hello-world-gitops-infra . --namespace my-helm-test

    - name: Verify Helm chart installation
      run: |
        helm status my-release --namespace my-helm-test
        oc get all -n my-helm-test
